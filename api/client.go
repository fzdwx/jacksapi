package api

import (
	"net/http"
)

const (
	ApiBaseUrl = "https://chat-one.emmmm.dev"
	GPT35Turbo = "gpt-3.5-turbo"
)

type Callback func(resp *http.Response, err error)

type Client struct {
	accessCode string

	Model string
}

func NewClient(accessCode string) *Client {
	return &Client{accessCode: accessCode,
		Model: GPT35Turbo,
	}
}

func (c *Client) ChatStream(messages []ChatMessage) *ChatStream {
	return &ChatStream{
		temperature:     1.0,
		presencePenalty: 0.2,
		message:         messages,
		c:               c,
	}
}

type Body struct {
	Messages        []ChatMessage `json:"messages"`
	Stream          bool          `json:"stream"`
	Model           string        `json:"model"`
	Temperature     float64       `json:"temperature"`
	PresencePenalty float64       `json:"presence_penalty"`
}

type ChatMessage struct {

	// Role: Either of "system", "user", "assistant".
	// Typically, a conversation is formatted with a system message first, followed by alternating user and assistant messages.
	// The system message helps set the behavior of the assistant. In the example above, the assistant was instructed with “You are a helpful assistant.”
	// The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.
	// The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior.
	Role string `json:"role"`

	// Content: A content of the message.
	Content string `json:"content"`
}
